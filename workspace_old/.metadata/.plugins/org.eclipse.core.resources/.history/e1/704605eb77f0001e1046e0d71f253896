#include "xil_printf.h"
#define one_ms 100*1000
#define one_us 100
#define DELAY_UNIT 81
#define INCH_CONST 1

#define LEDS ( *(unsigned volatile *)0x40000000)
#define SW ( *(unsigned volatile *)0x40000008)
#define JB ( *(unsigned volatile *)0x40010000)
#define DPSEG ( *(unsigned volatile *)0x40020000)
#define AN ( *(unsigned volatile *)0x40020008)
#define BTN ( *(unsigned volatile *)0x40030000)

#define ALARM_CNTR (*(volatile unsigned *)0x44a10000)
#define ALARM0 (*(volatile unsigned *)0x44a10004)
#define ALARM1 (*(volatile unsigned *)0x44a10005)
#define ALARM0_VALUE (*(volatile unsigned *)0x44a10008)
#define ALARM1_VALUE (*(volatile unsigned *)0x44a1000C)

//#define pmod_cntr (*(volatile unsigned *)0x44a00004)
//#define pmod_sw_btn (*(volatile unsigned *)0x44a00000)

#define ALT_CNTR (*(volatile unsigned *)0x44a00000)
#define DUMMY (*(volatile unsigned *)0x44a00004)

void delay_ms(unsigned t){
		unsigned cntr1, cntr2;
		while(t--)
		for (cntr1 = 0; cntr1<100; cntr1++){
			for (cntr2 = 0; cntr2<DELAY_UNIT; cntr2++){}
		}
}


void delay_ms2 (uint32_t val){
	while ((ALARM0 & (1<<0)) == 0){}
	ALARM0_VALUE = 100000000; //set alarm offset to loop time
	}


void sev_blinker(uint8_t data[4],uint8_t cursor)
{

	static uint16_t cnt=0;
		static uint16_t digit = 0;
		_Bool disp;
		const uint8_t disp_lut[10] = {0b00111111, 0b0000110, 0b01011011, 0b01001111, 0b01100110, 0b01101101, 0b01111101, 0b00000111, 0b01111111, 0b01100111};

		if(cnt != cursor || disp){
			AN = ~(1<<cnt);
		}else {
			AN = 0xF;
		}

	    DPSEG=~disp_lut[data[cnt]];
	    if(++cnt == 4){
	    	cnt = 0;
	    }
	    if (digit == 1){
	    		DPSEG ^= 0b10000000;
	    }

	    if(digit < 500){
	    	disp = 1;
	    } else {
	    	disp = 0;
	    }

	    if(++digit == 1000) digit = 0;


}

set_led(unsigned int dis)
{
	LEDS &= ~(1<<0);
	LEDS &= ~(1<<1);
	LEDS &= ~(1<<2);
	LEDS &= ~(1<<3);
	LEDS &= ~(1<<4);
	LEDS &= ~(1<<5);
	LEDS &= ~(1<<6);
	LEDS &= ~(1<<7);
	LEDS &= ~(1<<8);
	LEDS &= ~(1<<9);
	LEDS &= ~(1<<10);
	LEDS &= ~(1<<11);
	LEDS &= ~(1<<12);

	if(dis ==0)
	{
		LEDS |=(1<<0);
	}
	if(dis ==1)
	{
		LEDS |=(1<<1);
	}
	if(dis ==2)
	{
		LEDS |=(1<<2);
	}
	if(dis ==3)
		{
			LEDS |=(1<<3);
		}
	if(dis ==4)
		{
			LEDS |=(1<<4);
		}
	if(dis ==5)
		{
			LEDS |=(1<<5);
		}
	if(dis ==6)
		{
			LEDS |=(1<<6);
		}
	if(dis ==7)
		{
			LEDS |=(1<<7);
		}
	if(dis ==8)
		{
			LEDS |=(1<<8);
		}
	if(dis ==9)
		{
			LEDS |=(1<<9);
		}
	if(dis ==10)
		{
			LEDS |=(1<<10);
		}
	if(dis ==11)
		{
			LEDS |=(1<<11);
		}
	if(dis ==12)
		{
			LEDS |=(1<<12);
		}

}
_Bool right_button_press(){

	_Bool retval=0;
	static _Bool state=0;
	if(!state && BTN &(1<<3))
	{

		retval=1;
		state=1;
	}
	state=BTN &(1<<3);
	return retval;



}

int main() {
    uint8_t data[4];
    uint8_t cursor = 0;
    uint8_t leftmost = 0;
    uint8_t rightmost = 0;
    uint8_t leftmiddle = 0;
    uint8_t rightmiddle = 0;
    int32_t pulse_cntr = 0;
    int32_t count = 0;
    int32_t prev_count = 0;
    int32_t difference = 0;
    uint8_t testvalue = 0;
    uint8_t elsevalue = 0;
    _Bool display;

    print("Lab8 Launched!\n\r");

    while (1) {
        delay_ms(1);

        if (right_button_press()) {
        	print("right");
            xil_printf("%04x \n", DUMMY);
        }

        if (++pulse_cntr == 60) {
//        	print("60");
            ALARM1_VALUE = 1000;
            JB |= (1 << 0);
            while ((ALARM0 & (1 << 1)) == 0) {}
            JB &= ~(1 << 0);
            pulse_cntr = 0;
            count = ALT_CNTR;
            difference = count - prev_count;
            LEDS &= ~(0xFFF); // Clear all LEDs

            if (SW & (1 << 0)) {
                for (int j = 0; j < 36; j++)
                    if (((j * 21517) < difference) && (difference < 21517 * (j + 1))) {
                        for (int i = 1; i < j + 2; i++) {
                            if ((i * INCH_CONST * 12) <= difference) {
                                testvalue++;
                                if (testvalue == 12 || testvalue == 24 || testvalue == 36) {
                                    LEDS |= (1 << ((i / 12) - 1));
                                    elsevalue++;
                                }
                                xil_printf("%d \n", elsevalue);
                            }
                        }
                        rightmiddle = elsevalue;
                    }
                }
            } else {
                for (int z = 0; z < 12; z++) {
                    if (((z * 21517) < difference) && (difference < 21517 * (z + 1))) {
                        for (int p = 1; p < z + 2; p++) {
                            if ((p * INCH_CONST * 12) <= difference) {
                                LEDS |= (1 << (p - 1));
                                testvalue++;
                                xil_printf("%d \n", testvalue);
                            }
                        }
                        rightmost = testvalue;
                    }
                }
            }

            prev_count = count;
            pulse_cntr=0;
        }

        data[3] = rightmost;
        data[2] = rightmiddle;
        data[1] = leftmiddle;
        data[0] = leftmost;
//        display = counter();
//        seg_disp(data, cursor, display);
        testvalue = 0;
        elsevalue = 0;
    }
