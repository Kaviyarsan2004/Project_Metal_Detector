#include "xil_printf.h"
#define one_ms 100*1000
#define one_us 100

#define LEDS ( *(unsigned volatile *)0x40000000)
#define SW ( *(unsigned volatile *)0x40000008)
#define JB ( *(unsigned volatile *)0x40010000)
#define DPSEG ( *(unsigned volatile *)0x40020000)
#define AN ( *(unsigned volatile *)0x40020008)
#define BTN ( *(unsigned volatile *)0x40030000)

#define alarm_cntr (*(volatile unsigned *)0x44a10000)
#define alarm0 (*(volatile unsigned *)0x44a10004)
#define alarm1 (*(volatile unsigned *)0x44a10005)
#define alarm0_value (*(volatile unsigned *)0x44a10008)
#define alarm1_value (*(volatile unsigned *)0x44a1000C)

#define sonic_cntr (*(volatile unsigned *)0x44a00000)
#define  dummy (*(volatile unsigned *)0x44a00004)

void delay_ms2(uint32_t val)
{
	while((alarm1_alarm0 &(1<<0))==0)
	{

	}
	alarm0_value= one_ms * val;
}
void delay_us(uint32_t val)
{
	while((alarm1_alarm0 &(1<<1))==0)
	{

	}
	alarm1_value= one_us * val;
}

_Bool left_button_press(){

	_Bool retval=0;
	static _Bool state=0;
	if(!state && BTN &(1<<2))
	{

		retval=1;
		state=1;
	}
	state=BTN &(1<<2);
	return retval;

}

void sev_blinker(uint8_t data[4],uint8_t cursor)
{

	static uint16_t cnt=0;
		static uint16_t digit = 0;
		_Bool disp;
		const uint8_t disp_lut[10] = {0b00111111, 0b0000110, 0b01011011, 0b01001111, 0b01100110, 0b01101101, 0b01111101, 0b00000111, 0b01111111, 0b01100111};

		if(cnt != cursor || disp){
			AN = ~(1<<cnt);
		}else {
			AN = 0xF;
		}

	    DPSEG=~disp_lut[data[cnt]];
	    if(++cnt == 4){
	    	cnt = 0;
	    }
	    if (digit == 1){
	    		DPSEG ^= 0b10000000;
	    }

	    if(digit < 500){
	    	disp = 1;
	    } else {
	    	disp = 0;
	    }

	    if(++digit == 1000) digit = 0;


}

set_led(unsigned int dis)
{
	LEDS &= ~(1<<0);
	LEDS &= ~(1<<1);
	LEDS &= ~(1<<2);
	LEDS &= ~(1<<3);
	LEDS &= ~(1<<4);
	LEDS &= ~(1<<5);
	LEDS &= ~(1<<6);
	LEDS &= ~(1<<7);
	LEDS &= ~(1<<8);
	LEDS &= ~(1<<9);
	LEDS &= ~(1<<10);
	LEDS &= ~(1<<11);
	LEDS &= ~(1<<12);

	if(dis ==0)
	{
		LEDS |=(1<<0);
	}
	if(dis ==1)
	{
		LEDS |=(1<<1);
	}
	if(dis ==2)
	{
		LEDS |=(1<<2);
	}
	if(dis ==3)
		{
			LEDS |=(1<<3);
		}
	if(dis ==4)
		{
			LEDS |=(1<<4);
		}
	if(dis ==5)
		{
			LEDS |=(1<<5);
		}
	if(dis ==6)
		{
			LEDS |=(1<<6);
		}
	if(dis ==7)
		{
			LEDS |=(1<<7);
		}
	if(dis ==8)
		{
			LEDS |=(1<<8);
		}
	if(dis ==9)
		{
			LEDS |=(1<<9);
		}
	if(dis ==10)
		{
			LEDS |=(1<<10);
		}
	if(dis ==11)
		{
			LEDS |=(1<<11);
		}
	if(dis ==12)
		{
			LEDS |=(1<<12);
		}

}

int main()
{
	uint8_t data[4];
	uint8_t pulse_cntr=0;
	data[3]=0;
	data[2]=0;
	data[1]=0;
	data[0]=0;

    print("Hello World\n\r");
    while(1)
        {

        	delay_ms2(1);
        	int count;
        	int distance;
        	if (++pulse_cntr > 60)
        	{
	//        	print("60");
				alarm1_value = 1000;
				JB |= (1 << 0);
				while ((alarm0 & (1 << 1)) == 0) {}
				JB &= ~(1 << 0);
				pulse_cntr = 0;
				count = sonic_cntr;
				print("%d", count);
				if(SW &(1<<0))
				{
					count =count / 100;
					distance=count / 148;
					distance =12 - distance;
					setBit(distance);
				}
				else{
					count =count / 100;
					distance=count / 148;
					distance =distance / 12;
					distance =3 - distance;
					setBit(distance);
				}
			}

}
